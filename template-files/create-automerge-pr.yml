# Created using @tscircuit/plop (npm install -g @tscircuit/plop)
name: Create Automerge PR

on:
  workflow_dispatch:
    inputs:
      head:
        description: The branch to merge into the base branch
        required: true
      base:
        description: The base branch to merge into
        required: false
        default: main
      title:
        description: The pull request title
        required: false
      body:
        description: The pull request body
        required: false
      labels:
        description: Comma separated list of labels to apply
        required: false
        default: automerge
  repository_dispatch:
    types:
      - create-automerge-pr

permissions:
  contents: write
  pull-requests: write

jobs:
  create-pr:
    runs-on: ubuntu-latest
    env:
      HEAD_BRANCH: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.head || github.event.client_payload.head }}
      BASE_BRANCH: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.base || github.event.client_payload.base || 'main' }}
      PR_TITLE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.title || github.event.client_payload.title || '' }}
      PR_BODY: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.body || github.event.client_payload.body || '' }}
      PR_LABELS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.labels || github.event.client_payload.labels || 'automerge' }}
    steps:
      - name: Validate input
        uses: actions/github-script@v7
        with:
          script: |
            if (!process.env.HEAD_BRANCH) {
              core.setFailed('A head branch must be provided via workflow inputs or repository_dispatch payload.');
            }
      - name: Create pull request
        id: create_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = process.env.HEAD_BRANCH;
            const base = process.env.BASE_BRANCH;
            const title = process.env.PR_TITLE || `Automated update from ${head}`;
            const body = process.env.PR_BODY || 'This pull request was created automatically.';

            try {
              const response = await github.rest.pulls.create({ owner, repo, head, base, title, body });
              core.setOutput('pull_number', response.data.number.toString());
              core.setOutput('html_url', response.data.html_url);
            } catch (error) {
              if (error.status === 422) {
                core.info('A matching pull request already exists or the branch is unavailable. Skipping creation.');
                core.setOutput('skipped', 'true');
                return;
              }
              throw error;
            }
      - name: Add labels
        if: steps.create_pr.outputs.skipped != 'true'
        uses: actions/github-script@v7
        env:
          PULL_NUMBER: ${{ steps.create_pr.outputs.pull_number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = (process.env.PR_LABELS || '').split(',').map(label => label.trim()).filter(Boolean);
            if (!labels.length) {
              core.info('No labels provided. Skipping label application.');
              return;
            }
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.PULL_NUMBER),
              labels,
            });
      - name: Dispatch automerge workflow
        if: steps.create_pr.outputs.skipped != 'true'
        uses: actions/github-script@v7
        env:
          PULL_NUMBER: ${{ steps.create_pr.outputs.pull_number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'automerge-pull-request',
              client_payload: {
                pull_number: Number(process.env.PULL_NUMBER),
              },
            });
            core.info(`Triggered automerge workflow for pull request #${process.env.PULL_NUMBER}.`);
